<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd
                    http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- bean definitions here -->
    <!-- 标签常用属性：
            bean => id:实例表示, class:关联类型的全限定类名
            property => name:属性名, value:基本数据类型及其包装类，字符串等类型的值, ref:引用外部 Bean实例
     -->
    <!-- 1.基础的对象创建 -->
    <!--    <bean id="demo" class="com.practice.entity.BeanDemo"/>-->

    <!-- 2.setter方式注入属性 -->
    <!--    <bean id="demo" class="com.practice.entity.BeanDemo">-->
    <!--        <property name="demoCode" value="0001"/>-->
    <!--        <property name="demoString" value="demoProperty"/>-->
    <!--    </bean>-->

    <!-- 3.构成器注入属性 -->
    <!-- 定义了带参构造器之后，若不提供无参构造器，按基础的对象创建方式创建对象会报错，提示没有默认的构造器 -->
    <!--        <bean id="demoError" class="com.practice.entity.BeanDemo"/>-->
    <!--        <bean id="demo" class="com.practice.entity.BeanDemo">-->
    <!--            &lt;!&ndash; 带参构造器 &ndash;&gt;-->
    <!--            <constructor-arg name="demoSize" value="100"/>-->
    <!--        </bean>-->

    <!-- 4.p 属性命名空间 -->
    <!--    <bean id="demo" class="com.practice.entity.BeanDemo" p:demoCode="0001" p:demoString="code and string"/>-->

    <!-- 5.注入特殊含特殊字符的值 -->
    <!--    <bean id="demo" class="com.practice.entity.BeanDemo">-->
    <!--        <property name="demoCode" value="&lt;0001&gt;"/>-->
    <!--        <property name="demoString">-->
    <!--            <value><![CDATA["<带特殊字符的串>"]]></value>-->
    <!--        </property>-->
    <!--    </bean>-->

    <!-- 6.注入集合属性，数组属性 -->
    <!--    <bean id="demo" class="com.practice.entity.BeanDemo">-->
    <!--        <property name="demoArray">-->
    <!--            <array>-->
    <!--                <value>one</value>-->
    <!--                <value>two</value>-->
    <!--            </array>-->
    <!--        </property>-->
    <!--        <property name="demoList">-->
    <!--            <list>-->
    <!--                <value>list_one</value>-->
    <!--                <value>list_two</value>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--        <property name="demoMap">-->
    <!--            <map>-->
    <!--                <entry key="key_one">-->
    <!--                    <value>map_one</value>-->
    <!--                </entry>-->
    <!--                <entry key="key_two">-->
    <!--                    <value>map_two</value>-->
    <!--                </entry>-->
    <!--            </map>-->
    <!--        </property>-->
    <!--    </bean>-->

    <!-- 7.注入对象属性 -->
    <!-- 内部Bean -->
    <!--    <bean id="demo" class="com.practice.entity.BeanDemo">-->
    <!--        <property name="connect">-->
    <!--            <bean id="connect" class="com.practice.entity.BeanDemoConnect">-->
    <!--                <property name="connectCode" value="00000"/>-->
    <!--                <property name="connectString" value="11111"/>-->
    <!--            </bean>-->
    <!--        </property>-->
    <!--    </bean>-->
    <!--    &lt;!&ndash; 外部Bean &ndash;&gt;-->
    <!--    <bean id="outDemo" class="com.practice.entity.BeanDemo">-->
    <!--        <property name="connect" ref="outConnect"/>-->
    <!--    </bean>-->
    <!--    <bean id="outConnect" class="com.practice.entity.BeanDemoConnect">-->
    <!--        <property name="connectCode" value="00001"/>-->
    <!--        <property name="connectString" value="22222"/>-->
    <!--    </bean>-->
    <!--    &lt;!&ndash; 级联赋值 &ndash;&gt;-->
    <!--    <bean id="linkDemo" class="com.practice.entity.BeanDemo">-->
    <!--        <property name="connect" ref="linkConnect"/>-->
    <!--        <property name="connect.connectCode" value="00002"/>-->
    <!--        <property name="connect.connectString" value="33333"/>-->
    <!--    </bean>-->
    <!--    <bean id="linkConnect" class="com.practice.entity.BeanDemoConnect"/>-->
    <!--    &lt;!&ndash; 对象集合注入 &ndash;&gt;-->
    <!--    <bean id="listDemo" class="com.practice.entity.BeanDemo">-->
    <!--        <property name="connects">-->
    <!--            <list>-->
    <!--                <ref bean="outConnect"/>-->
    <!--                <ref bean="linkConnect"/>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--    </bean>-->
    <!--    &lt;!&ndash; 抽取对象集合部分 &ndash;&gt;-->
    <!--    <bean id="listDemoUtil" class="com.practice.entity.BeanDemo">-->
    <!--        <property name="connects" ref="connectList"/>-->
    <!--    </bean>-->
    <!--    &lt;!&ndash; 以下的外部注入方式会生成一个集合对象，可以在容器中通过getBean的方式获取 &ndash;&gt;-->
    <!--    <util:list id="connectList">-->
    <!--        <ref bean="linkConnect"/>-->
    <!--        <ref bean="outConnect"/>-->
    <!--    </util:list>-->

    <!-- 8.FactoryBean -->
    <!-- BeanFactoryDemo 为FactoryBean<BeanDemo>的实现，此处创建的应该是BeanDemo的实例 -->
    <!--    <bean id="demo" class="com.practice.factory.BeanFactoryDemo"/>-->

    <!-- 9.bean的作用域及生命周期 scope属性指定作用域，单例或多例-->
    <!-- scope: singleton 单例, prototype 多例 -->
    <bean id="demoScope" class="com.practice.entity.BeanDemoScope" scope="singleton" init-method="initInstance" destroy-method="destroyInstance">
        <property name="code" value="setter"/>
    </bean>
    <!-- 创建Bean处理器对象，在对象创建的生命周期过程中，都会执行如下实现定义的初始化前后方法 -->
    <bean id="beanDemoPostProcessor" class="com.practice.processor.BeanDemoPostProcessor"/>
</beans>